from collections import OrderedDict

import RLschedulingAlgo
from performance_online import Performance


if __name__ == '__main__':

    hostinfo = OrderedDict()
    hostinfo['10.170.23.190'] = {'user': 'root', 'password': '123456', 'gpu_num': 2, 'node_id': 1,
                                 'node_name': 'master',
                                 'GPUmemory_util': [0, 0]}
    dim_dict = {'max_node_num': 1, 'max_GPU_num': 2, 'max_worker_num': 8, 'max_job_type': 8,
                'max_job_running': 20, 'max_job_gpu': 16}
    # node_dict = {1: 'master', 2: 'node1', 3: 'node2', 4: 'node3'}
    node_dict = {1: 'master'}

    node_info = {'master': {'GPU_num': 2, 'GPU_util': [0.0, 0.0], 'GPUmemory_total': [24576.0, 24576.0],
                            'GPUmemory_util': [5000, 0], 'node_id': 1}}
    for i in range(10):

        test = OrderedDict([('dcgan-7-3-10-32', OrderedDict([('job_index', 1), ('namespace', 'dljobs'), ('pod_list', ['dcgan-7-3-10-32-worker-0', 'dcgan-7-3-10-32-worker-1', 'dcgan-7-3-10-32-worker-2']), ('phase', ['Pending', 'Pending', 'Pending']), ('worker_num', 3), ('job_type', 6), ('GPUutil_demand', 60), ('GPUmem_demand', 1400), ('time_per_epoch', 22), ('batch_size', 32), ('epoch_num', 10), ('start_time', [None, None, None]), ('end_time', [None, None, None]), ('running_node', [None, None, None]), ('creation_time', ['2023-11-22 11:31:15', '2023-11-22 11:31:15', '2023-11-22 11:31:16']), ('corr_gpu_util', [None, None, None]), ('epoch', [None, None, None]), ('epoch_time', [None, None, None]), ('gpumemory_used', [None, None, None]), ('gpu_id', [None, None, None])])), ('dcgan-7-6-20-32', OrderedDict([('job_index', 2), ('namespace', 'dljobs'), ('pod_list', ['dcgan-7-6-20-32-worker-0', 'dcgan-7-6-20-32-worker-1', 'dcgan-7-6-20-32-worker-2', 'dcgan-7-6-20-32-worker-3', 'dcgan-7-6-20-32-worker-4', 'dcgan-7-6-20-32-worker-5']), ('phase', ['Pending', 'Pending', 'Pending', 'Pending', 'Pending', 'Pending']), ('worker_num', 6), ('job_type', 6), ('GPUutil_demand', 60), ('GPUmem_demand', 1400), ('time_per_epoch', 22), ('batch_size', 32), ('epoch_num', 20), ('start_time', [None, None, None, None, None, None]), ('end_time', [None, None, None, None, None, None]), ('running_node', [None, None, None, None, None, None]), ('creation_time', ['2023-11-22 11:31:22', '2023-11-22 11:31:23', '2023-11-22 11:31:23', '2023-11-22 11:31:23', '2023-11-22 11:31:24', '2023-11-22 11:31:24']), ('corr_gpu_util', [None, None, None, None, None, None]), ('epoch', [None, None, None, None, None, None]), ('epoch_time', [None, None, None, None, None, None]), ('gpumemory_used', [None, None, None, None, None, None]), ('gpu_id', [None, None, None, None, None, None])])), ('dcgan-7-6-30-16', OrderedDict([('job_index', 3), ('namespace', 'dljobs'), ('pod_list', ['dcgan-7-6-30-16-worker-0', 'dcgan-7-6-30-16-worker-1', 'dcgan-7-6-30-16-worker-2']), ('phase', ['Pending', 'Pending', 'Pending']), ('worker_num', 6), ('job_type', 6), ('GPUutil_demand', 60), ('GPUmem_demand', 1400), ('time_per_epoch', 22), ('batch_size', 16), ('epoch_num', 30), ('start_time', [None, None, None]), ('end_time', [None, None, None]), ('running_node', [None, None, None]), ('creation_time', ['2023-11-22 11:31:35', '2023-11-22 11:31:35', '2023-11-22 11:31:36']), ('corr_gpu_util', [None, None, None]), ('epoch', [None, None, None]), ('epoch_time', [None, None, None]), ('gpumemory_used', [None, None, None]), ('gpu_id', [None, None, None])])), ('resnet-2-6-30-16', OrderedDict([('job_index', 4), ('namespace', 'dljobs'), ('pod_list', ['resnet-2-6-30-16-worker-0', 'resnet-2-6-30-16-worker-1', 'resnet-2-6-30-16-worker-2', 'resnet-2-6-30-16-worker-3', 'resnet-2-6-30-16-worker-4', 'resnet-2-6-30-16-worker-5']), ('phase', ['Pending', 'Pending', 'Pending', 'Pending', 'Pending', 'Pending']), ('worker_num', 6), ('job_type', 1), ('GPUutil_demand', 30), ('GPUmem_demand', 5000), ('time_per_epoch', 45), ('batch_size', 16), ('epoch_num', 30), ('start_time', [None, None, None, None, None, None]), ('end_time', [None, None, None, None, None, None]), ('running_node', [None, None, None, None, None, None]), ('creation_time', ['2023-11-22 11:31:12', '2023-11-22 11:31:12', '2023-11-22 11:31:12', '2023-11-22 11:31:12', '2023-11-22 11:31:13', '2023-11-22 11:31:13']), ('corr_gpu_util', [None, None, None, None, None, None]), ('epoch', [None, None, None, None, None, None]), ('epoch_time', [None, None, None, None, None, None]), ('gpumemory_used', [None, None, None, None, None, None]), ('gpu_id', [None, None, None, None, None, None])])), ('rnn-5-6-30-8', OrderedDict([('job_index', 5), ('namespace', 'dljobs'), ('pod_list', ['rnn-5-6-30-8-worker-0', 'rnn-5-6-30-8-worker-1', 'rnn-5-6-30-8-worker-2', 'rnn-5-6-30-8-worker-3', 'rnn-5-6-30-8-worker-4', 'rnn-5-6-30-8-worker-5']), ('phase', ['Pending', 'Pending', 'Pending', 'Pending', 'Pending', 'Pending']), ('worker_num', 6), ('job_type', 4), ('GPUutil_demand', 35), ('GPUmem_demand', 1300), ('time_per_epoch', 20), ('batch_size', 8), ('epoch_num', 30), ('start_time', [None, None, None, None, None, None]), ('end_time', [None, None, None, None, None, None]), ('running_node', [None, None, None, None, None, None]), ('creation_time', ['2023-11-22 11:31:30', '2023-11-22 11:31:31', '2023-11-22 11:31:31', '2023-11-22 11:31:31', '2023-11-22 11:31:32', '2023-11-22 11:31:32']), ('corr_gpu_util', [None, None, None, None, None, None]), ('epoch', [None, None, None, None, None, None]), ('epoch_time', [None, None, None, None, None, None]), ('gpumemory_used', [None, None, None, None, None, None]), ('gpu_id', [None, None, None, None, None, None])])), ('unet-3-2-10-8', OrderedDict([('job_index', 6), ('namespace', 'dljobs'), ('pod_list', ['unet-3-2-10-8-worker-0', 'unet-3-2-10-8-worker-1']), ('phase', ['Pending', 'Pending']), ('worker_num', 2), ('job_type', 2), ('GPUutil_demand', 45), ('GPUmem_demand', 4500), ('time_per_epoch', 50), ('batch_size', 8), ('epoch_num', 10), ('start_time', [None, None]), ('end_time', [None, None]), ('running_node', [None, None]), ('creation_time', ['2023-11-22 11:31:17', '2023-11-22 11:31:18']), ('corr_gpu_util', [None, None]), ('epoch', [None, None]), ('epoch_time', [None, None]), ('gpumemory_used', [None, None]), ('gpu_id', [None, None])])), ('unet-3-4-20-16', OrderedDict([('job_index', 7), ('namespace', 'dljobs'), ('pod_list', ['unet-3-4-20-16-worker-0', 'unet-3-4-20-16-worker-1', 'unet-3-4-20-16-worker-2', 'unet-3-4-20-16-worker-3']), ('phase', ['Pending', 'Pending', 'Pending', 'Pending']), ('worker_num', 4), ('job_type', 2), ('GPUutil_demand', 60), ('GPUmem_demand', 4500), ('time_per_epoch', 30), ('batch_size', 16), ('epoch_num', 20), ('start_time', [None, None, None, None]), ('end_time', [None, None, None, None]), ('running_node', [None, None, None, None]), ('creation_time', ['2023-11-22 11:31:27', '2023-11-22 11:31:27', '2023-11-22 11:31:28', '2023-11-22 11:31:28']), ('corr_gpu_util', [None, None, None, None]), ('epoch', [None, None, None, None]), ('epoch_time', [None, None, None, None]), ('gpumemory_used', [None, None, None, None]), ('gpu_id', [None, None, None, None])])), ('unet-3-4-30-8', OrderedDict([('job_index', 8), ('namespace', 'dljobs'), ('pod_list', ['unet-3-4-30-8-worker-0', 'unet-3-4-30-8-worker-1', 'unet-3-4-30-8-worker-2', 'unet-3-4-30-8-worker-3']), ('phase', ['Pending', 'Pending', 'Pending', 'Pending']), ('worker_num', 4), ('job_type', 2), ('GPUutil_demand', 45), ('GPUmem_demand', 4500), ('time_per_epoch', 50), ('batch_size', 8), ('epoch_num', 30), ('start_time', [None, None, None, None]), ('end_time', [None, None, None, None]), ('running_node', [None, None, None, None]), ('creation_time', ['2023-11-22 11:31:19', '2023-11-22 11:31:19', '2023-11-22 11:31:20', '2023-11-22 11:31:20']), ('corr_gpu_util', [None, None, None, None]), ('epoch', [None, None, None, None]), ('epoch_time', [None, None, None, None]), ('gpumemory_used', [None, None, None, None]), ('gpu_id', [None, None, None, None])]))])

        job_info =OrderedDict()

        for i,j in test.items():
            if i.find("resnet")!=-1:
                job_info[i]=j

        curr_time = '2023-11-21 21:12:38'

        reward = -10
        j = 0
        agent = RLschedulingAlgo.PPO(dim_dict, node_dict, hostinfo)
        policy = agent.make_decision(node_info, job_info, node_dict, curr_time, reward, j)

        print("?????????????????")
        print(policy)
